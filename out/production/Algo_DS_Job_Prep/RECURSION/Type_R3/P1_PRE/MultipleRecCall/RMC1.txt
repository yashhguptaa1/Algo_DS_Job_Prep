Type 1

Work /Check /Compare in PRE PHASE.
Then make recursive call which reduces search space every time.
It means work on the way up till you hit base case.

Then you just go on popping out recursive calls from call stack;

It's structure is similar to that of tail recursion

2)IN PRE PHASE

WE ARE PRESENT IN CURRENT RECURSIVE CALL AT THIS POINT
THIS MEANS IT DENOTES THE NODE WHICH IS CURRENT FUNC CALL

NOW WE NOTE DOWN A VALUE (this value is generally used to determine options)
THAT WILL BE USED BY ALL THE BRANCHES COMING OUT FROM
THAT PARTICULAR NODE ONLY
THAT IS THIS VALUE WILL BE PASSED TO ALL RECURSIVE CALLS MADE FROM CURRENT NODE

WE EITHER TRACK (A COUNTER VARIABLE ) AND PASS IT IN FUNC CALL
OR
WE STORE IT IN SOME VARIABLE

3)IN CALL PHASE
NUMBER OF RECURSIVE CALLS MADE FROM CURRENT NODE DENOTE
NUMBER OF BRANCHES WHICH IS SAME AS
NUMBER OPTIONS THAT EVERY RECURSIVE CALL CAN HAVE

TWO BRANCHES : TWO POSSIBLE OPTIONS
SUCH AS :
YES and NO
APPEND and NOTAPPEND
LEFTNODE and RIGHT NODE

TWO RECURSIVE CALL and RETURN/ PRINT IN BASE CASE
ques) PRINT ALL SUBSEQUENCES

USING FOR LOOP TO DENOTE MULTIPLE OPTIONS(BRANCHES)
MORE THAN TWO RECURSIVE CALLS ,