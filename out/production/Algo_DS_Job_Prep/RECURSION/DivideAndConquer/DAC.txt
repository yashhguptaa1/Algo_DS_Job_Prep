1) In PRE PHASE
    Decide the factor on the basis of which you would divide your subproblems into two
    i) Can be mid index of array (any DS)
        Merge Sort
    ii)Can be pivot index of array(any DS)
        Quick Sort

2) In CALL PHASE
    Make Recursive Calls (Two Recursive Calls)
    that point to two different subproblems of main problem
    The updated argument to be passed in these recursive calls
    is decided by the FACTOR obtained above

   Also
   If there is a return type Initialize variables to store answers of

3)

Although BINARY SEARCH package and SORTING package both use the principle of DIVIDE and CONQUER but
THERE IS A MAJOR DIFFERENCE

In BINARY SEARCH : It uses the principle of eliminating (DISCARD) the search space
                   to reduce the input size on which our algorithm will work in next iteration

1) BASE CASE
    You generally Return a result to denote Search Failed (sometimes final answer too)

2) In PREPHASE
    i) CHOOSE DIVIDING FACTOR on basis of which search space can be reduced
       mostly it is : int mid = low + (high - low)/2
    ii)Choosing ANSWER variable (optional)
    iii) CONQUER by solving for single Element
        return result if search is successful

3) RECURSIVE CALLS PHASE
   Using the Dividing factor obtained above to DISCARD/ELIMINATE search space
   //unlike merge sort where we generally use Recursive calls to combine our result so far

4) Return