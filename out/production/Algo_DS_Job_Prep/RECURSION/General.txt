TO DRY RUN RECURSIVE CODE WE MAKE EULER DIAGRAM
WHICH IS RECURSUVE TREE DIAGRAM IN WHICH

NODES : CURRENT RECURSIVE CALL
BRANCHES : NUMBER OF TIMES RECURSIVE FUNCTION CALLED FROM CURRENT FUNC
            : OPTIONS /CHOICES

WE MAKE TREE WHERE MAIN CALL NODE IS AT BOTTOM AND BASE CALL NODES AT TOP
AS THEY LOOK SIMILAR TO WHAT WOULD HAPPEN IN STACK


MOST OF THE RECURSION PROBLEMS ARE BASED ON LOGIC
1) DECREASE AND CONQUER
    IN EACH NEXT(FUTURE) RECURSIVE CALL YOU DECREASE THE SPACE SEARCH TO BE SOLVED UPON


TWO MORE DIVERSIONS OF THIS ARE
1) DIVIDE AND CONQUER
    DIVIDE MAIN PROBLEM INTO TWO SUBPROBLEMS USING RECURSION
     THEN SOLVE THESE SUBPROBLEMS FIRST

2) DYNAMIC PROGRAMMING
    IF IN ANY OF THE ABOVE CASES YOU CALL THE SAME RECURSIVE FUNCTION AGAIN
    IT MEANS TRYING TO SOLVE THE SAME SUBPROBLEM AGAIN
    ITS BETTER TO SOLVE THE SOLUTION OF SAME SUBPROBLEM SO YOU DONT HAVE TO SOLVE IT AGAIN
    (BEING LAZY I GUESS)

preArea Or PrePhase -> area before all calls
