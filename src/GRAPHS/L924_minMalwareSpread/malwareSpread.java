package GRAPHS.L924_minMalwareSpread;

import java.util.*;
public class malwareSpread {

    int[] par;
    int size[];

    int findPar(int u) {
        return par[u] == -1 ? u : (par[u] = findPar(par[u]));
    }


    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        size = new int[n];
        par = new int[n];

        for (int i = 0; i < n; i++) {
            par[i] = i;
            size[i] = 1;
        }

        Arrays.sort(initial);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (i != j && graph[i][j] == 1) {
                    int p1 = findPar(i);
                    int p2 = findPar(j);

                    if (p1 != p2) {
                        par[p1] = p2;
                        size[p2] += size[p1];
                    }
                }
            }
        }

        int[] InfectedNodesInCity = new int[n];
        for (int i : initial) {
            int leader = findPar(i);
            InfectedNodesInCity[leader]++;
        }

        int ans = initial[0];
        int maxPopulatedCity = 0;
        for (int i : initial) {
            int NoOfNodesInfected = InfectedNodesInCity[findPar(i)];
            if (NoOfNodesInfected == 1 && size[findPar(i)] > maxPopulatedCity) {
                maxPopulatedCity = size[findPar(i)];
                ans = i;
            }
        }

        return ans;
    }
}
