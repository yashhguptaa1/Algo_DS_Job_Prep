
    // gfg -> generateBinary link :
    // https://practice.geeksforgeeks.org/problems/generate-binary-numbers-1587115620/1
    public static ArrayList<String> generate(int n) {
        ArrayList<String> res = new ArrayList<>();

        Queue<String> qu = new ArrayDeque<>();

        qu.add("1");

        for (int i = 0; i < n; i++) {
            String rem = qu.remove();

            res.add(rem);
            qu.add(rem + "0");
            qu.add(rem + "1");
        }
        return res;
    }

    // push Efficient - Stack from Queue
    public static class QueueToStackAdapterPushEfficient {
        Queue<Integer> mainQ;
        Queue<Integer> helperQ;

        public QueueToStackAdapter() {
            mainQ = new ArrayDeque<>();
            helperQ = new ArrayDeque<>();
        }

        int size() {
            return mainQ.size();
        }

        void push(int val) {
            mainQ.add(val);
        }

        int pop() {
            if (mainQ.size() == 0) {
                System.out.println("Stack underflow");
                return -1;
            }

            // n - 1 remove from mainQ, add it in helper Q
            while (mainQ.size() > 1) {
                helperQ.add(mainQ.remove());
            }
            // get the value of nth element from mainQ
            int val = mainQ.peek();
            // remove nth element
            mainQ.remove();
            // change reference
            Queue<Integer> temp = mainQ;
            mainQ = helperQ;
            helperQ = temp;
            // return val
            return val;
        }

        int top() {
            if (mainQ.size() == 0) {
                System.out.println("Stack underflow");
                return -1;
            }

            // n - 1 remove from mainQ, add it in helper Q
            while (mainQ.size() > 1) {
                helperQ.add(mainQ.remove());
            }
            // get the value of nth element from mainQ
            int val = mainQ.peek();
            // add nth value in helperQ
            helperQ.add(mainQ.remove());
            // change reference
            Queue<Integer> temp = mainQ;
            mainQ = helperQ;
            helperQ = temp;
            // return val
            return val;
        }
    }

    // pop Efficient - Stack from Queue
    public static class QueueToStackAdapterPopEfficient {
        Queue<Integer> mainQ;
        Queue<Integer> helperQ;

        public QueueToStackAdapter() {
          mainQ = new ArrayDeque<>();
          helperQ = new ArrayDeque<>();
        }

        int size() {
            return mainQ.size();
        }

        void push(int val) {
            // // 1. fill helperQ from mainQ
            // while(mainQ.size() > 0) {
            // helperQ.add(mainQ.remove());
            // }
            // // 2. add new element in mainQ
            // mainQ.add(val);
            // // 3. refill mainQ from helperq
            // while(helperQ.size() > 0) {
            // mainQ.add(helperQ.remove());
            // }

            helperQ.add(val);

            while (mainQ.size() > 0) {
                helperQ.add(mainQ.remove());
            }

            mainQ = helperQ;
            helperQ = new ArrayDeque<>();
        }

        int pop() {
            if (mainQ.size() == 0) {
                System.out.println("Stack underflow");
                return -1;
            }

            return mainQ.remove();
        }

        int top() {
            if (mainQ.size() == 0) {
                System.out.println("Stack underflow");
                return -1;
            }

            return mainQ.peek();
        }
    }

    // add Efficient - Queue from Stack
    public static class StackToQueueAdapterAddEfficient {
        Stack<Integer> mainS;
        Stack<Integer> helperS;

        public StackToQueueAdapter() {
          mainS = new Stack<>();
          helperS = new Stack<>();
        }

        int size() {
            return mainS.size();
        }

        void add(int val) {
            mainS.push(val);
        }

        int remove() {
            if (mainS.size() == 0) {
                System.out.println("Queue underflow");
                return -1;
            }
            // 1. move n-1 elements from main stack to helper stack
            while (mainS.size() > 1) {
                helperS.push(mainS.pop());
            }
            // 2. get last element + remove last element
            int val = mainS.pop();
            // 3. move n - 1 element from helper to main
            while (helperS.size() > 0) {
                mainS.push(helperS.pop());
            }
            // 4. return value
            return val;
        }

        int peek() {
            if (mainS.size() == 0) {
                System.out.println("Queue underflow");
                return -1;
            }
            // 1. move n-1 elements from main stack to helper stack
            while (mainS.size() > 1) {
                helperS.push(mainS.pop());
            }
            // 2. get last element + remove last element
            int val = mainS.peek();
            // 3. move n - 1 element from helper to main
            while (helperS.size() > 0) {
                mainS.push(helperS.pop());
            }
            // 4. return value
            return val;
        }
    }

    // remove efficient - queue from stack
    public static class StackToQueueAdapterRemoveEfficient {
        Stack<Integer> mainS;
        Stack<Integer> helperS;

        public StackToQueueAdapter() {
            mainS = new Stack<>();
            helperS = new Stack<>();
        }

        int size() {
            return mainS.size();
        }

        void add(int val) {
            while (mainS.size() > 0) {
                helperS.push(mainS.pop());
            }

            mainS.push(val);

            while (helperS.size() > 0) {
                mainS.push(helperS.pop());
            }
        }

        int remove() {
            if (mainS.size() == 0) {
                System.out.println("Queue underflow");
                return -1;
            }
            return mainS.pop();
        }

        int peek() {
            if (mainS.size() == 0) {
                System.out.println("Queue underflow");
                return -1;
            }
            return mainS.peek();
        }
    }

    public static class TwoStack {
        int[] data;
        int tos1;
        int tos2;

        public TwoStack(int cap) {
            data = new int[cap];
            tos1 = -1;
            tos2 = cap;
        }

        int size1() {
            return tos1 + 1;
        }

        int size2() {
            return data.length - tos2;
        }

        void push1(int val) {
            if(tos1 + 1 < tos2) {
                data[tos1 + 1] = val;
                tos1++;
            } else {
                System.out.println("Stack overflow");
            }
        }

        void push2(int val) {
            if(tos1 + 1 < tos2) {
                data[tos2 - 1] = val;
                tos2--;
            } else {
                System.out.println("Stack overflow");
            }
        }

        int pop1() {
            if(tos1 == -1) {
                System.out.println("Stack underflow");
                return -1;
            } else {
                int val = data[tos1];
                tos1--;
                return val;
            }
        }

        int pop2() {
            if(tos2 == data.length) {
                System.out.println("Stack underflow");
                return -1;
            } else {
                int val = data[tos2];
                tos2++;
                return val;
            }
        }

        int top1() {
            if(tos1 == -1) {
                System.out.println("Stack underflow");
                return -1;
            } else {
                int val = data[tos1];
                return val;
            }
        }

        int top2() {
            if(tos2 == data.length) {
                System.out.println("Stack underflow");
                return -1;
            } else {
                int val = data[tos2];
                return val;
            }
        }
    }
