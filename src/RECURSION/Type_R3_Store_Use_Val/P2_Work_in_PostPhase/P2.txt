Type_R3.P2 : This is an extension to TYPE_R2_PRE
           : It means work on the way down till you exit from first Main call
           : It means go on adding rec calls in call Stack, hit base case
           : AS you go on popping rec call start doing work
           : return the result(in post phase) to next rec call in call stack

1) Start from Main call


2) BASE CASE
    You Hit BASE CASE
    RETURN the ans that would have been actual ans if you would have
    EMPTY test case OR NULL POINTER EXCEPTION OR CREATE A NEW ARRAY OR LIST

3) RECURSIVE CALL
    AS YOU GO UP (in recursive tree diagram)
    Initialize ReturnType Variable INTERMEDIATE_RESULT in current Recursive Call
    to Store the result of next Recursive Call
    ( future Recursive calls to reduce search space
    OR to traverse all elements ( all possibilities ) to reach end of a data structure .
    OR to have all the function calls that can be made stored with you in CALL STACK
    )

4) In POST PHASE
    Each time as you POP out rec call from CALL STACK
    When you are in current call
    DO your work / check / compare in POST PHASE on the INTERMEDIATE_RESULT
    returned from recursive call that was just popped out.

5) RETURN STATEMENT
    Then return the new result obtained after working on INTERMEDIATE result

General Code structure

public static <T> funcRec ( int n) {

        1) BASE CASE

        2) T res = RECURSIVE CALL FUNC( n+1 );

        3) DO your WORK

        4) return (updated res);

    }

EXAMPLE
public static int factorial(int n){
        if(n==0)
            return 1;

        int INTERMEDIATE_RESULT=factorial(n-1); // Faith
        int UPDATED_RESULT = n * INTERMEDIATE_RESULT;

        return UPDATED_RESULT;

//SHORTHAND VERSION
//        return n * factorial(n-1);

    }